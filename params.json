{"name":"I18N Generator Maven Plugin","tagline":"","body":"### Abstract ###\r\n\r\nThis project provides a Maven plugin that generate Java class with methods that match i18n properties. Calling methods\r\non the generated interface rather that reference string property keys in source code prevent never reference a\r\nnon-existing key.\r\n\r\nFor instance, assume that we have two java property files. The fist one, `messages.properties`, provides english messages\r\n(the default language in this case) for an application\r\n\r\n```\r\nhello.world=Hello everybody\r\nhello.to.somebody=Hello {0} {1}\r\n```\r\n\r\nAnd the second one, `messages_fr_FR.properties`, provides the same messages in french\r\n\r\n```\r\nhello.world=Bonjour tout le monde\r\nhello.to.somebody=Bonjour {0} {1}\r\n```\r\n\r\nThe purpose of the plugin is to generate a java interface (and its implementation, as we'll see later) with methods\r\nthat match properties defined in `*.properties` files. The generated interface looks something like this one\r\n\r\n```java\r\npublic interface Messages {\r\n\r\n  String hello_world();\r\n\r\n  String hello_to_somebody(String arg0, String arg1);\r\n\r\n}\r\n```\r\n\r\nAn implementation class for this interface is generated as well. The goal of this implementation is to return the value\r\ncorresponding to the right language for each interface's method. \"The right language\" means the one according to either\r\nthe defaut locale or the one given by  a LocaleProvider, an interface that can be implemented to compute the locale on\r\nthe fly at runtime. For example, you would like to get the locale from the user session in case of a web application.\r\n\r\n```java\r\npublic class MessagesImpl implements Messages {\r\n\r\n  @Override\r\n  public String hello_world() {\r\n    // ...\r\n  }\r\n  \r\n  @Override\r\n  public String hello_to_somebody(String arg0, String arg1) {\r\n    // ...\r\n  }\r\n  \r\n  // Some technical stuffs...\r\n  \r\n}\r\n```\r\n\r\nThen, you finally just have to use these generated class in you application like any another. For example,\r\n\r\n```java\r\nMessages messages = ... // Instanciate the MessagesImpl class the way you want. With the new keywork, a Spring lookup, ...\r\nString helloMe = messages.hello_to_somebody(\"Guillaume\", \"Giamarchi\");\r\n```\r\n\r\nThat's all folks !\r\n\r\n<hr/>\r\n\r\n### Quickstart ###\r\n\r\n_(Available soon)_\r\n\r\n<hr/>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}